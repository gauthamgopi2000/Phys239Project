import numpy as np
import scipy.integrate
import matplotlib.pyplot as plt
%matplotlib inline

class Project(object):
    
    """
    This is a class for decidng what form of derivation equation is to be used.
    """
    
    def __init__(self, p, dt1, tmax, r0, v0):
        """
        Create a day of the year

        Parameters:
        -----------
        p = number of protons
        dt1 = time step
        v0 = inital velociy's
        r0 = initial positions
        m1 = initial mass's
        tmax = final time
        """
        
        self.p = p
        self.dt1 = dt1
        self.v0 = v0
        self.r0 = r0
        self.mp = 1.67*10**-27
        self.tmax = tmax
        
    def __str__(self):
        _outstr = " euler: " + str(self.euler())
        _outstr += " rk4: " + str(self.RK4())
        return  _outstr 
    


    
    def RK4(self):
        """
        creates a derivative with the euler method
        
        Args:
            __int__ Parameters
        
        Returns:
            New positions per time
        """
        # same as previous
        dt = self.dt1 
        t0=0. 
        a = np.zeros(self.p*2)
        r = np.array(self.r0)
        v = np.array(self.v0)
        q = np.array([r,v])
        save = np.array([r])
        tpoints = np.arange(t0,self.tmax,dt)
        time =[0.]
        Save=[]

        
        def af(r):
            k = 9*(10**9)
            Q1 = 1.6*10**-19
            Q2 = 1.6*10**-19
            for i in range(0,(2*self.p)-1,2):

                for j in range(0,(2*self.p)-1,2): 

                    if i!=j:

                        y= r[j+1] - r[i+1]
                        x=r[j] - r[i]
                        d = (x*x + y*y)**0.5
                    
                        a[i] =-(k/self.mp)*Q1*Q1*x/d/d/d
                        a[i+1] =-(k/self.mp)*Q2*Q2*y/d/d/d
                       
        
            return (np.array(a))

        
        def f(q, t):
            """
            creates an array of velocity and acceleration

            Args:
               position (r) and velocity(v)

            Returns:
                velocity (v) and acceleration (a)
            """           
            return (np.array([q[1,:], af(q[0,:])]))
        
        def box(q):
            
            for i in range(0,2*self.p,1):

                if q[0,i] < -1 : q[1,i] = -q[1,i]
                if q[0,i] > 1 : q[1,i] = -q[1,i]
                        
            return (q)

        for t in tpoints:
            q = box(q)
            save = np.concatenate((save, [q[0]]),axis=0)
            time.append(t)
            k1 = dt*f(q, t)  #Splits the time step into 4 and looks at the derivative at each point
            k2 = dt*f(q + 0.5*k1, t+0.5*dt)
            k3 = dt*f(q + 0.5*k2, t+0.5*dt)
            k4 = dt*f(q + k3, t+dt)
            q += (k1+2*k2+2*k3+k4)/6.0

        return (np.array(time),save)
        
(t,save) = Project(2,.01,20,[0.,0.,10**-1,0.2],[0.,0.,0.,0.]).RK4();    
(x1,y1,x2,y2)=(save[:,0],save[:,1],save[:,2],save[:,3])
plt.plot(x1,y1,'r.')
plt.plot(x2,y2,'b.')
#plt.plot(t,x1,'r.')
#plt.plot(t,x2,'b.')

plt.tight_layout()
    
